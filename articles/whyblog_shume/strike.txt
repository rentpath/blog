RentPath (owner and operator of apartmentguide.com, livelovely.com, rent.com, rentalhouses.com, and rentals.com) relies almost exclusively on open source technologies to build, run, and maintain its businesses. Clojure, Elixir, Java, Ruby, MySQL, Redis, nginx, Puppet, and dozens of other open source packages power our public and proprietary web sites, native mobile applications, backend servers, and network infrastructure. Open source solutions are typically free (“free, as in beer”) or more affordable than proprietary analogs; open source can be customized readily without restrictions (“free, as in speech”); and because all inner workings are laid bare to hack, improvements are shared widely and quickly. 

Indeed, expertise is as valuable as the source code itself. Given a handful of packages with similar purpose, the one with the most vibrant community of contributors and users often emerges as the most popular—even if it’s not the superior implementation. RentPath engineering certainly counts the corpus of questions in Stack Overflow, the availability of blog posts, the depth and breadth of technical documentation, and the number and freshness of git commits in its evaluation calculus. Time and again, we’ve found an implementation, optimization, or bug fix is just a click away. 

Because RentPath and its staff benefits greatly from open source code and community, we want to reciprocate and provide the same benefits to others. Hence, the launch of this blog, “Code for Rent.” 

From Elixir hacks to scalability, RentPath software developers and system administrators intend to share know-how, tips, tricks, triumphs, and yes, even travails. Some developers like emacs, others vim; both camps will share favorite hacks. You will learn about how we work remotely. You can expect opinion and prognastication, best practices and warts, and tons and tons of code. Although RentPath is far from a startup and Silicon Valley (the company is based in Atlanta, Georgia), the reach and scale of the business is no less challenging, and our “stack” is no less interesting.

